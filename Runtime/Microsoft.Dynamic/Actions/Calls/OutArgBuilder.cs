/* ****************************************************************************
 *
 * Copyright (c) Microsoft Corporation. 
 *
 * This source code is subject to terms and conditions of the Microsoft Public License. A 
 * copy of the license can be found in the License.html file at the root of this distribution. If 
 * you cannot locate the  Microsoft Public License, please send an email to 
 * dlr@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
 * by the terms of the Microsoft Public License.
 *
 * You must not remove this notice, or any other, from this software.
 *
 *
 * ***************************************************************************/

#if !CLR2
using System.Linq.Expressions;
#else
using Microsoft.Scripting.Ast;
#endif

using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Reflection;
using AstUtils = Microsoft.Scripting.Ast.Utils;

namespace Microsoft.Scripting.Actions.Calls
{
	using Ast = Expression;

	/// <summary>StrongBox として渡されなかった場合、out 引数に対する実引数を生成します。out 引数は追加の返戻値として返されます。</summary>
	sealed class OutArgBuilder : ArgBuilder
	{
		readonly Type _parameterType;
		readonly bool _isRef;
		ParameterExpression _tmp;

		/// <summary>指定された仮引数を使用して、<see cref="Microsoft.Scripting.Actions.Calls.OutArgBuilder"/> クラスの新しいインスタンスを初期化します。</summary>
		/// <param name="info">この <see cref="OutArgBuilder"/> が対応する仮引数を指定します。</param>
		public OutArgBuilder(ParameterInfo info) : base(info)
		{
			_parameterType = info.ParameterType.IsByRef ? info.ParameterType.GetElementType() : info.ParameterType;
			_isRef = info.ParameterType.IsByRef;
		}

		/// <summary>このビルダによって消費される実際の引数の数を取得します。</summary>
		public override int ConsumedArgumentCount { get { return 0; } }

		/// <summary>この引数の優先順位を取得します。</summary>
		public override int Priority { get { return 5; } }

		/// <summary>引数に渡される値を提供する <see cref="Expression"/> を返します。</summary>
		/// <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="OverloadResolver"/> を指定します。</param>
		/// <param name="args">制約された引数を指定します。</param>
		/// <param name="hasBeenUsed">呼び出しが完了すると使用された引数に対応する位置に <c>true</c> が格納されます。</param>
		/// <returns>引数に渡される値を提供する <see cref="Expression"/>。引数がスキップされた場合 (つまり、呼び出し先に渡されない場合) <c>null</c> を返します。</returns>
		protected internal override Expression ToExpression(OverloadResolver resolver, RestrictedArguments args, bool[] hasBeenUsed)
		{
			if (_isRef)
			{
				if (_tmp == null)
					_tmp = resolver.GetTemporary(_parameterType, "outParam");
				return _tmp;
			}
			return GetDefaultValue();
		}

		/// <summary>引数が返戻値を生成する (ref あるいは out のような) 場合、呼び出し元に追加で返される値を提供します。</summary>
		/// <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="OverloadResolver"/> を指定します。</param>
		/// <returns>呼び出し基で追加で返される値を提供する <see cref="Expression"/>。</returns>
		internal override Expression ToReturnExpression(OverloadResolver resolver)
		{
			if (_isRef)
				return _tmp;
			return GetDefaultValue();
		}

		/// <summary>参照私の引数によって渡される代入可能な値を取得します。呼び出し後は更新された値が格納されます。</summary>
		internal override Expression ByRefArgument { get { return _isRef ? _tmp : null; } }

		Expression GetDefaultValue()
		{
			if (_parameterType.IsValueType)
				// default(T)                
				return AstUtils.Constant(Activator.CreateInstance(_parameterType));
			return AstUtils.Constant(null);
		}
	}
}
